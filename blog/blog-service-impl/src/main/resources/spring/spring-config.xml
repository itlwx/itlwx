<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-4.1.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">

    <description>spring配置文件</description>

    <!-- Spring容器初始化监听器 -->
    <bean class="com.itlwx.common.utils.SpringContextUtil"/>

    <!-- 引入属性配置文件 -->
    <bean id="propertyConfig" class="com.itlwx.common.utils.PropertyGetter">
        <property name="locations">
            <list>
                <value>classpath:/resource/system.properties</value>
                <value>classpath:/resource/db.properties</value>
                <value>classpath:/resource/dubbo.properties</value>
            </list>
        </property>
    </bean>

    <bean id="dozerBeanMapperFactoryBean" class="org.dozer.spring.DozerBeanMapperFactoryBean" scope="singleton">
        <property name="mappingFiles" value="classpath*:/*Mapping.xml"/>
    </bean>

    <!-- 扫描指定目录下服务 -->
    <context:component-scan base-package="com.itlwx.*.service"/>

    <!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${db.initialSize}"/>
        <property name="minIdle" value="${db.minIdle}"/>
        <property name="maxActive" value="${db.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${db.maxWait}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用） <property name="poolPreparedStatements"
            value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize"
            value="20" /> -->

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="log4j"/>
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter"/>
                <ref bean="log-filter"/>
            </list>
        </property>
    </bean>

    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="mergeSql" value="true"/>
        <property name="slowSqlMillis" value="3000"/>
        <property name="logSlowSql" value="true"/>
    </bean>
    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter"></bean>

    <!-- <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
       <constructor-arg name="dataSource" ref="dataSource" />
     </bean>-->

    <!-- 配置sqlsessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis/SqlMapConfig.xml"></property>
        <property name="dataSource" ref="dataSource"></property>
        <property name="mapperLocations">
            <list>
                <value>classpath*:com/itlwx/*/mapper/mapping/*Mapper.xml</value>
            </list>
        </property>
    </bean>

    <!-- 配置扫描包，加载mapper代理对象 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.itlwx.*.mapper"></property>
    </bean>

    <!-- 事务管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <tx:advice id="defaultTxAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true" timeout="60"/>
            <tx:method name="query*" read-only="true" timeout="60"/>
            <tx:method name="list*" read-only="true" timeout="60"/>
            <tx:method name="find*" read-only="true" timeout="60"/>
            <tx:method name="load*" read-only="true" timeout="60"/>
            <tx:method name="select*" read-only="true" timeout="60"/>
            <tx:method name="*" rollback-for="Exception" timeout="60"/>
        </tx:attributes>
    </tx:advice>

    <tx:advice id="asynTxAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="list*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="load*" read-only="true"/>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="*" propagation="REQUIRES_NEW" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="servicePointcut"
                      expression="execution(* com.itlwx.*.service..*Service.*(..))"/>
        <aop:pointcut id="asynServicePointcut"
                      expression="execution(* com.itlwx.*.service..*ServiceAsyn.*(..))"/>
        <aop:advisor advice-ref="defaultTxAdvice" pointcut-ref="servicePointcut"/>
        <aop:advisor advice-ref="asynTxAdvice" pointcut-ref="asynServicePointcut"/>
    </aop:config>
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!--引入其他配置-->
    <import resource="classpath:spring/dubbo-config.xml"/>
    <import resource="classpath:spring/dubbo-provider.xml"/>

</beans>